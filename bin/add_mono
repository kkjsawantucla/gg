#! /usr/bin/env python

"""Add monodentate adsorbate/ligand"""
import argparse
from gg.modifiers import Add
from gg.sites import FlexibleSites
from ase.io import read, write

parser = argparse.ArgumentParser(description="Command line utilities")
parser.add_argument(
    "--surface",
    "-surface",
    "-s",
    type=str,
    nargs="+",
    help="Path to surface atoms objects to adsorb",
)
parser.add_argument(
    "--adsorbate",
    "-adsorbate",
    "-a",
    type=str,
    nargs="+",
    help="Path to adsorbate atoms objects to process",
)
parser.add_argument(
    "--surf_sym",
    "-surf_sym",
    "-ss",
    type=str,
    nargs="+",
    help="Symbols of atoms that can adsorb",
)
parser.add_argument(
    "--ads_atom",
    "-ads_atom",
    "-aa",
    type=str,
    help="Atom through which the adsorbate attaches to the surface",
)
parser.add_argument(
    "--surf_coord",
    "-surf_coord",
    "-sc",
    type=int,
    nargs="+",
    help="Co - ordination of surface atoms: eg. 1-top, 2-bridge, 3-fcc/hcp",
)
parser.add_argument(
    "--unique",
    "-unique",
    "-u",
    type=bool,
    default=True,
    help="Whether to check if the structures are repeated",
)
parser.add_argument(
    "--max_bond_ratio",
    "-max_bond_ratio",
    "-mbr",
    type=float,
    default=0.2,
    help="Allowable tolerance between bonds",
)
parser.add_argument(
    "--max_bond",
    "-max_bond",
    "-mb",
    type=float,
    default=0,
    help="Fixed allowable bond distance",
)

args = parser.parse_args()
print("--------------------------------------------")
print("Surface Atoms found :", args.surface)
print("Adsorbate Atoms found :", args.adsorbate)

if args.surf_coord:
    print(f"\nSurface Co-ordination : {args.surf_coord}")
else:
    raise RuntimeError("Please provide Surface coordination using -sc")

if args.ads_atom:
    print(f"Adding adosrbate through {args.ads_atom}")
else:
    raise RuntimeError("Please provide Adsorbate atom that binds using -aa")

if args.surface and args.adsorbate:
    for surface_name in args.surface:
        for adsorbate_name in args.adsorbate:
            surface = read(surface_name)
            adsorbate = read(adsorbate_name)

            FS = FlexibleSites(
                constraints=True,
                max_bond_ratio=1 + args.max_bond_ratio,
                max_bond=args.max_bond,
                contact_error=args.max_bond_ratio,
            )

            if not args.surf_sym:
                args.surf_sym = set(surface.get_chemical_symbols())

            a = Add(
                weight=1,
                surface_sites=FS,
                ads=adsorbate,
                surf_coord=args.surf_coord,
                surf_sym=args.surf_sym,
                ad_dist=args.ads_atom,
                print_movie=True,
                unique=args.unique,
            )

            filename = f"{adsorbate.get_chemical_formula()}_{surface.get_chemical_formula()}.traj"
            new_modified_atoms = a.get_modified_atoms(surface)
            print(f"\nFound {len(new_modified_atoms)} structures")
            print(f"Writing Structures to {filename}")
            print("--------------------------------------------")
            write(filename=filename, images=new_modified_atoms, format="traj")
else:
    raise RuntimeError("Input is empty")
