[Core Classes in gg.sites] ---
class Sites():
    """Base for site identification using neighborlist graphs."""
    def __init__(self, max_bond_ratio=1.2, max_bond=0, contact_error=0.2):
    """ max_bond_ratio (float, optional): Max bond ratio to make graph of atoms to delete.Defaults to 1.2.
        max_bond (int, optional): Max bond ratio to make graph of atoms to delete. Defaults to 0."""
        self.graph = None  # Stores NetworkX graph of atomic bonds

    def get_graph(self, atoms: ase.Atoms) -> nx.Graph:
        """Build graph using ASE neighborlist with bond tolerance parameters."""
        #Uses atoms_to_graph() from gg.utils_graph helper for conversion

class RuleSites(Sites):
    """Combine site selection rules (union/intersection). Accepts parser functions like:
    - get_unconstrained_sites()
    - get_com_sites()
    - get_surface_sites_by_coordination()
    - get_surface_sites_by_voronoi_pbc() 
    - get_surface_by_normals()
    """    
    def __init__(self, index_parsers=None, combine_rules="union"):
        super().__init__(max_bond_ratio=1.2, max_bond=0, contact_error=0.2)
        self.index_parsers = index_parsers or [lambda atoms: all_indices]
        #Rules can be: union ('u') or intersection ('i')

# [Parser-Ready Functions available in gg.sites] ---

def get_unconstrained_sites(atoms):-> list:
    """Filter atoms not fixed by ASE constraints."""

def get_com_sites(atoms, fraction: float=1.0, direction="above"):-> list:
    """Select atoms above/below center-of-mass plane in z-direction."""
    #Uses COM z-coordinate + fraction thresholding

def get_surface_sites_by_coordination(atoms, max_coord):-> list:
    """Find undercoordinated atoms using bond graph analysis."""
    #Requires mx_coord hich is dict of {element: max_coordination} - (e.g., {'Au': 12})
    #Returns sorted indices by coordination deficit and height

def get_surface_sites_by_voronoi_pbc(atoms, rem_symbols: list[str] = None) -> list:
    """Identify surface atoms via Voronoi tessellation (requires Scipy).
	Voronoi surface detection (excludes atoms with symbols in rem_symbols)"""
    #Replicates atoms using PBC, checks for unbounded Voronoi cells

def get_surface_by_normals(atoms, surface_normal=0.5, rem_symbols: list[str] = None):
    """Detect surface using atomic neighbor vectors (normals).
	Normal vector-based surface (filters out rem_symbols before analysis)."""
    #Surface atoms have normal vector magnitudes greater than urface_normal=0.5

[Core Classes in gg.predefined_sites] ---
from gg.sites import sites, get_unconstrained_sites, get_surface_sites_by_coordination, get_com_sites

class FlexibleSites(Sites):
    """Combine multiple selection criteria:
    - Constraints (unfixed atoms)
    - Tags (specific or opposite)
    - Explicit indices
    - COM z-position filtering
    """
    def __init__(self, constraints=False, index=None, tag=None, opp_tag=False, 
                 com=None, **kwargs):
        super().__init__(**kwargs)
        self.constraints = constraints
        self.index = index  # Direct index selection
        self.tag = tag      # Tag-based filtering
        self.opp_tag = opp_tag  # Invert tag selection
        self.com = com      # COM height threshold

    def get_sites(self, atoms) -> list[int]:
        """Applies filters sequentially: constraints → tag → COM"""
        indices = self.index or range(len(atoms))
        if self.constraints:
            indices &= get_unconstrained_sites(atoms)
        if self.tag is not None:
            tag_set = set(get_tagged_sites(atoms, self.tag))
            indices = indices - tag_set if self.opp_tag else indices & tag_set
        if self.com:
            indices &= get_com_sites(atoms, self.com)
        return indices

class SurfaceSites(Sites):
    """Identifies surface atoms through coordination deficits + COM filtering"""
    def __init__(self, max_coord: dict, com=0.1, **kwargs):
        super().__init__(**kwargs)
        self.max_coord = max_coord  # Element-specific coord thresholds (e.g., {'Au': 12})
        self.com = com  # Center-of-mass cutoff

    def get_sites(self, atoms) -> list:
        """Uses coordination analysis then applies COM filter"""
        indices = get_surface_sites_by_coordination(atoms, self.max_coord, **self._params)
        if self.com:
            indices &= get_com_sites(atoms, fraction=self.com)
        return indices

[Examples on How to use site class] ---
    slab = ase.Atoms()
    #Code to get sites by center of mass with fraction = 0.5 and "above" 
    ss = FlexibleSites(com=0.5)
    sites = ss.get_sites(slab)

    #Code to get surface atoms through coordination deficits with COM filtering
    max_coord = {"Al": 6, "Si": 4, "O": 2, "H": 1}
    ss = SurfaceSites(max_coord=max_coord)
    sites = ss.get_sites(slab)

    #Without COM filtering
    ss = SurfaceSites(max_coord=max_coord, com=False)
    sites = ss.get_sites(slab)

    #Use surface normal code with RuleSite and index parsor 
    ss = RuleSites(
        index_parsers=[
            lambda atoms: get_surface_by_normals(atoms, rem_symbols=["C", "O"])
        ],
    )
    sites = ss.get_sites(slab)

    #Way to add multiple parsors together
    ss = RuleSites(
        index_parsers=[
            lambda atoms: get_surface_by_normals(atoms),
            lambda atoms: get_com_sites(atoms, fraction=0.6),
        ],
        combine_rules="u",
    )
    sites = ss.get_sites(slab)

[Core Classes in gg.modifiers] ---
#The modifiers form the building block of the code. They determine how the atoms are modified during each basin hopping step. 
#The code provides basic modifiers as building blocks for more complex modifiers.

class ParentModifier:
    """Base class for atomic structure modifications."""
    def init(self, weight=1.0):
    self.weight = weight

    def get_modified_atoms(self, atoms):
        """Apply modification to atoms. Must be implemented by subclasses."""
        raise NotImplementedError

[subclasses of gg.modifiers.ParentModifier] ---

#All class have print_movie and unique argument. If unique = True, the Modifier returns only unique ase.Atoms structures. 
#It uses gg.utils_graph.get_unique_atoms which internally uses networkx isomorphism
#print_movie (bool, optional): Return a movie of all sites or one random site.

class Rattle(ParentModifier):
    """Modifier that rattles the ase.Atoms"""

    def __init__(
        self,
        surface_sites: gg.Sites,
        stdev: float = 0.01,
        weight: float = 1,
    ):
    def get_modified_atoms(self, atoms: Atoms) -> Atoms:

class Remove(ParentModifier):
    """Modifier that removes an atom or molecule based on networkx graphs"""

    def __init__(
        self,
        surface_sites: Sites,
        to_del: Union[Atoms, str],
        max_bond_ratio: float = 1.2,
        max_bond: float = 0,
        print_movie: bool = False,
        unique: bool = False,
        weight: float = 1,
    ):
        """
        to_del (str) or (ase.Atoms): Atoms to delete. If a string is provided, it tries to make a molecule out of it.
        Example: 
        sites = FlexibleSites(constraints=True)
        remover = Remove(surface_sites=sites,to_del="CO",print_movie=True)
        unique_structures = remover.get_modified_atoms(slab)
        """
